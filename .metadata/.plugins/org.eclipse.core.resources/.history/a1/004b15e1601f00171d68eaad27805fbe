package uoa.compsys302.project;

import java.util.ArrayList;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.paint.Color;
import javafx.scene.paint.ImagePattern;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
/**
 * This is the class that initialises the buttons and textfields for the setup scenes that take 
 * in information from the user about what kind of multiplayer game they want to play
 * @author Ira Syamira,Savi Mohan
 *
 */
public class MultiplayerSetupController {
	private MasterViewsController masterViewsController;
	private Group root;
	private Scene multiplayerSetupScene;
	private int setupStage;
	private int humanPlayerCount;
	private int gameMode;
	private int gameLevel;
	private Text setupText;
	private int buttonIndex;//keeps track of the current button highlighted by the keyboard keys
	private ArrayList<Button> buttonList;//stores all the buttons created
	
	/**
	 * Constructor for the MultiplayerSetupController class
	 * @param masterViewsController Takes in an instance of MasterViewsController so that the MultiplayerSetupController can switch scenes
	 */
	public MultiplayerSetupController(MasterViewsController masterViewsController){
		this.masterViewsController = masterViewsController;
		humanPlayerCount = 2;
		gameMode = 1;
		gameLevel = 5;
		setupStage = 1;
		buttonList = new ArrayList<Button>(); 
		buttonIndex = 0;
	}
	/**
	 * Instantiates buttons and/or textfields relevant to a setup stage and adds them to a 
	 * root node, then returns a scene container that is made from the root node.
	 * @param width
	 * @param height
	 * @param setupStage determines which stage of game setup the user is in(ie. choosing player number or choosing map level etc)
	 * @return the multiplayerSetupScene that contains the necessary buttons and/or text fields for the required setup stage
	 */
	public Scene initialise(int width, int height, int setupStage) {
		this.setupStage = setupStage;
		switch (this.setupStage) {
		case 1://setup stage 1 takes in information about how many human players will be playing the game
			buttonList = new ArrayList<Button>(); 
			buttonIndex = 0;
			
			root = new Group();
			Image img = new Image("file:src/Images/Default_screen.png");
			
			multiplayerSetupScene = new Scene(root, width, height, new ImagePattern(img));
			setupText = new Text(362,100,"SELECT PLAYER NUMBER");
			setupText.setFill(Color.WHITE);
			setupText.setFont(Font.font("Verdana", 20));
			root.getChildren().add(setupText);
			//creates two player button
			Button twoPlayerButton = new Button();
			twoPlayerButton.setText("2 PLAYER");
			twoPlayerButton.setLayoutX(362);
			twoPlayerButton.setLayoutY(200);
			twoPlayerButton.setMinWidth(300);
			twoPlayerButton.setMinHeight(50);
			twoPlayerButton.setFont(Font.font("Verdana", 20));
			twoPlayerButton.setTextFill(Color.BLUE);
			twoPlayerButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	humanPlayerCount = 2;//if this button is pressed, then human player number will be 2 for the game
	            	initialise(1024,768,2);//once button is pressed progress to the next setup stage
	            }
	        }); 
			buttonList.add(twoPlayerButton);
			root.getChildren().add(twoPlayerButton);
			//creates three player button
			Button threePlayerButton = new Button();
			threePlayerButton.setText("3 PLAYER");
			threePlayerButton.setLayoutX(362);
			threePlayerButton.setLayoutY(300);
			threePlayerButton.setMinWidth(300);
			threePlayerButton.setMinHeight(50);
			threePlayerButton.setFont(Font.font("Verdana", 20));
			threePlayerButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	humanPlayerCount = 3;//if this button is pressed then game will involve 3 human players
	            	initialise(1024,768,2);//progress to next setup stage
	            }
	        });  
			buttonList.add(threePlayerButton);
			root.getChildren().add(threePlayerButton);
			
			Button fourPlayerButton = new Button();
			fourPlayerButton.setText("4 PLAYER");
			fourPlayerButton.setLayoutX(362);
			fourPlayerButton.setLayoutY(400);
			fourPlayerButton.setMinWidth(300);
			fourPlayerButton.setMinHeight(50);
			fourPlayerButton.setFont(Font.font("Verdana", 20));
			fourPlayerButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	humanPlayerCount = 4;//if this button is pressed then all 4 players will be human controlled
	            	initialise(1024,768,2);//progress to next setup stage
	            }
	        });      
			buttonList.add(fourPlayerButton);
			root.getChildren().add(fourPlayerButton);
			
			//on top of having all the buttons being mouse clickable, their functionality can also be accessed via keyboard
			multiplayerSetupScene.setOnKeyPressed(new EventHandler<KeyEvent>() {
			    @Override
			    public void handle(KeyEvent ke) {
			        if (ke.getCode() == KeyCode.UP) {//if up key is pressed the highlighted button becomes the next one above on the screen		        	
			        	if(buttonIndex > 0){
			        		buttonIndex = buttonIndex - 1;
			        	}
			        	buttonList.get(buttonIndex).setTextFill(Color.BLUE);
			        	for (int i=0;i<buttonList.size();i++){
			        		if(i!=buttonIndex){
			        			buttonList.get(i).setTextFill(Color.BLACK);
			        		}
			        	}
			        } else if (ke.getCode() == KeyCode.DOWN) {//if down key is pressed the highlighted button becomes the next one below on the screen		        	
			        	if(buttonIndex < (buttonList.size()-1)){
			        		buttonIndex = buttonIndex + 1;
			        	}
			        	buttonList.get(buttonIndex).setTextFill(Color.BLUE);
			        	for (int i=0;i<buttonList.size();i++){
			        		if(i!=buttonIndex){
			        			buttonList.get(i).setTextFill(Color.BLACK);
			        		}
			        	}							
			        } else if (ke.getCode() == KeyCode.ENTER) {//if the enter key is pressed, the functionality of the current highlighted button is carried out
			        	switch(buttonIndex){
			        	case 0:
			        		humanPlayerCount = 2;
			            	initialise(1024,768,2);	
			    			break;
			    		case 1:
			    			humanPlayerCount = 3;
			            	initialise(1024,768,2);		
			    			break;
			    		
			    		case 2:
			    			humanPlayerCount = 4;
			            	initialise(1024,768,2);
			    			break;
			    		default:
			    			break;
			    			
			        	}
			        } 
			    }
			});
			
			break;
		case 2://in setup stage 2 the game mode is selected(normal mode, no walls mode, 3 ball mode)
			buttonList = new ArrayList<Button>(); 
			buttonIndex = 0;
			
			root.getChildren().clear();
			setupText.setText("SELECT GAME MODE");
			root.getChildren().add(setupText);
			
			Button normalModeButton = new Button();
			normalModeButton.setText("NORMAL MODE");
			normalModeButton.setLayoutX(362);
			normalModeButton.setLayoutY(200);
			normalModeButton.setMinWidth(300);
			normalModeButton.setMinHeight(50);
			normalModeButton.setFont(Font.font("Verdana", 20));
			normalModeButton.setTextFill(Color.BLUE);
			normalModeButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	gameMode = 1;//normal game mode
	            	initialise(1024,768,3);//go to next setup stage
	            }
	        });  
			buttonList.add(normalModeButton);
			root.getChildren().add(normalModeButton);
			
			Button suddenDeathButton = new Button();
			suddenDeathButton.setText("NO WALLS MODE");
			suddenDeathButton.setLayoutX(362);
			suddenDeathButton.setLayoutY(300);
			suddenDeathButton.setMinWidth(300);
			suddenDeathButton.setMinHeight(50);
			suddenDeathButton.setFont(Font.font("Verdana", 20));
			suddenDeathButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	gameMode = 2;//no walls mode (sudden death)
	            	initialise(1024,768,3);
	            }
	        });    
			buttonList.add(suddenDeathButton);
			root.getChildren().add(suddenDeathButton);
			
			Button threeBallButton = new Button();
			threeBallButton.setText("3 BALLS MODE");
			threeBallButton.setLayoutX(362);
			threeBallButton.setLayoutY(400);
			threeBallButton.setMinWidth(300);
			threeBallButton.setMinHeight(50);
			threeBallButton.setFont(Font.font("Verdana", 20));
			threeBallButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	gameMode = 3;//3 balls mode
	            	initialise(1024,768,3);
	            }
	        });     
			buttonList.add(threeBallButton);
			root.getChildren().add(threeBallButton);
			
			//on top of having all the buttons being mouse clickable, their functionality can also be accessed via keyboard
			multiplayerSetupScene.setOnKeyPressed(new EventHandler<KeyEvent>() {
			    @Override
			    public void handle(KeyEvent ke) {
			        if (ke.getCode() == KeyCode.UP) {	//if up key is pressed the highlighted button becomes the next one above on the screen	        	
			        	if(buttonIndex > 0){
			        		buttonIndex = buttonIndex - 1;
			        	}
			        	buttonList.get(buttonIndex).setTextFill(Color.BLUE);
			        	for (int i=0;i<buttonList.size();i++){
			        		if(i!=buttonIndex){
			        			buttonList.get(i).setTextFill(Color.BLACK);
			        		}
			        	}
			        } else if (ke.getCode() == KeyCode.DOWN) {//if down key is pressed the highlighted button becomes the next one below on the screen		        	
			        	if(buttonIndex < (buttonList.size()-1)){
			        		buttonIndex = buttonIndex + 1;
			        	}
			        	buttonList.get(buttonIndex).setTextFill(Color.BLUE);
			        	for (int i=0;i<buttonList.size();i++){
			        		if(i!=buttonIndex){
			        			buttonList.get(i).setTextFill(Color.BLACK);
			        		}
			        	}							
			        } else if (ke.getCode() == KeyCode.ENTER) {//if the enter key is pressed, the functionality of the current highlighted button is carried out
			        	switch(buttonIndex){
			        	case 0:
			        		gameMode = 1;
			            	initialise(1024,768,3);
			    			break;
			    		case 1:
			    			gameMode = 2;
			            	initialise(1024,768,3);		
			    			break;
			    		
			    		case 2:
			    			gameMode = 3;
			            	initialise(1024,768,3);
			    			break;
			    		default:
			    			break;
			    			
			        	}
			        } 
			    }
			});
			
			break;
		
		case 3://in this setup stage, the map level is selected
			buttonList = new ArrayList<Button>(); 
			buttonIndex = 0;
			
			root.getChildren().clear();
			setupText.setText("SELECT GAME MAP");
			root.getChildren().add(setupText);
			
			Button fireButton = new Button();
			fireButton.setText("FIRE");
			fireButton.setLayoutX(362);
			fireButton.setLayoutY(200);
			fireButton.setMinWidth(300);
			fireButton.setMinHeight(50);
			fireButton.setFont(Font.font("Verdana", 20));
			fireButton.setTextFill(Color.BLUE);
			fireButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	gameLevel = 1;//FIRE level
	            	initialise(1024,768,4);
	            }
	        });  
			buttonList.add(fireButton);
			root.getChildren().add(fireButton);
			
			Button airButton = new Button();
			airButton.setText("AIR");
			airButton.setLayoutX(362);
			airButton.setLayoutY(300);
			airButton.setMinWidth(300);
			airButton.setMinHeight(50);
			airButton.setFont(Font.font("Verdana", 20));
			airButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	gameLevel = 2;//AIR level
	            	initialise(1024,768,4);
	            }
	        });  
			buttonList.add(airButton);
			root.getChildren().add(airButton);
			
			Button waterButton = new Button();
			waterButton.setText("WATER");
			waterButton.setLayoutX(362);
			waterButton.setLayoutY(400);
			waterButton.setMinWidth(300);
			waterButton.setMinHeight(50);
			waterButton.setFont(Font.font("Verdana", 20));
			waterButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	gameLevel = 3;//WATER Level
	            	initialise(1024,768,4);
	            }
	        }); 
			buttonList.add(waterButton);
			root.getChildren().add(waterButton);
			
			Button earthButton = new Button();
			earthButton.setText("EARTH");
			earthButton.setLayoutX(362);
			earthButton.setLayoutY(500);
			earthButton.setMinWidth(300);
			earthButton.setMinHeight(50);
			earthButton.setFont(Font.font("Verdana", 20));
			earthButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	gameLevel = 4;//EARTH Level
	            	initialise(1024,768,4);
	            }
	        }); 
			buttonList.add(earthButton);
			root.getChildren().add(earthButton);
			
			Button aetherButton = new Button();
			aetherButton.setText("AETHER");
			aetherButton.setLayoutX(362);
			aetherButton.setLayoutY(600);
			aetherButton.setMinWidth(300);
			aetherButton.setMinHeight(50);
			aetherButton.setFont(Font.font("Verdana", 20));
			aetherButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	gameLevel = 5;//AETHER level
	            	initialise(1024,768,4);
	            }
	        });
			buttonList.add(aetherButton);
			root.getChildren().add(aetherButton);
			//on top of having all the buttons being mouse clickable, their functionality can also be accessed via keyboard
			multiplayerSetupScene.setOnKeyPressed(new EventHandler<KeyEvent>() {
			    @Override
			    public void handle(KeyEvent ke) {
			        if (ke.getCode() == KeyCode.UP) {//if up key is pressed the highlighted button becomes the next one above on the screen		        	
			        	if(buttonIndex > 0){
			        		buttonIndex = buttonIndex - 1;
			        	}
			        	buttonList.get(buttonIndex).setTextFill(Color.BLUE);
			        	for (int i=0;i<buttonList.size();i++){
			        		if(i!=buttonIndex){
			        			buttonList.get(i).setTextFill(Color.BLACK);
			        		}
			        	}
			        } else if (ke.getCode() == KeyCode.DOWN) {//if down key is pressed the highlighted button becomes the next one below on the screen		        	
			        	if(buttonIndex < (buttonList.size()-1)){
			        		buttonIndex = buttonIndex + 1;
			        	}
			        	buttonList.get(buttonIndex).setTextFill(Color.BLUE);
			        	for (int i=0;i<buttonList.size();i++){
			        		if(i!=buttonIndex){
			        			buttonList.get(i).setTextFill(Color.BLACK);
			        		}
			        	}							
			        } else if (ke.getCode() == KeyCode.ENTER) {//if the enter key is pressed, the functionality of the current highlighted button is carried out
			        	switch(buttonIndex){
			        	case 0:
			        		gameLevel = 1;
			            	initialise(1024,768,4);
			    			break;
			    		case 1:
			    			gameLevel = 2;
			            	initialise(1024,768,4);	
			    			break;
			    		
			    		case 2:
			    			gameLevel = 3;
			            	initialise(1024,768,4);
			    			break;
			    		case 3:
			    			gameLevel = 4;
			            	initialise(1024,768,4);
			    			break;
			    		case 4:
			    			gameLevel = 5;
			            	initialise(1024,768,4);
			    			break;
			    		default:
			    			break;
			    			
			        	}
			        } 
			    }
			});
			
			break;
		case 4://in the final setup stage the names of the players are taken from the user(s) via Textfields
			
			
			root.getChildren().clear();
			setupText.setText("ENTER NAMES FOR PLAYERS (MAX 8 Characters)\n\nUse TAB to switch between textfields");
			root.getChildren().add(setupText);
			//textfield that takes in player one's name
			final TextField player1Name = new TextField();
			player1Name.setPromptText("Player 1");
			player1Name.setPrefColumnCount(10);
			player1Name.setFont(new Font("Verdana",20));
			player1Name.setLayoutX(362);
			player1Name.setLayoutY(200);
			root.getChildren().add(player1Name);
			//textfield that takes in player two's name
			final TextField player2Name = new TextField();
			player2Name.setPromptText("Player 2");
			player2Name.setPrefColumnCount(10);
			player2Name.setFont(new Font("Verdana",20));
			player2Name.setLayoutX(362);
			player2Name.setLayoutY(300);
			root.getChildren().add(player2Name);
			//textfield that takes in player three's name
			final TextField player3Name = new TextField();
			player3Name.setPromptText("Player 3");
			player3Name.setPrefColumnCount(10);
			player3Name.setFont(new Font("Verdana",20));
			player3Name.setLayoutX(362);
			player3Name.setLayoutY(400);
			if(humanPlayerCount>2){//if the game is going to be a 3 or 4 player game then this textfield is added to the root
				root.getChildren().add(player3Name);
			}
			
			//textfield that takes in player four's name
			final TextField player4Name = new TextField();
			player4Name.setPromptText("Player 4");
			player4Name.setPrefColumnCount(10);
			player4Name.setFont(new Font("Verdana",20));
			player4Name.setLayoutX(362);
			player4Name.setLayoutY(500);
			if(humanPlayerCount>3){//if the game is going to be a 4 player game then this textfield is added to the root
				root.getChildren().add(player4Name);
			}			
			
			Button startButton = new Button();
			startButton.setText("Press Enter to Start");
			startButton.setTextFill(Color.BLUE);
			startButton.setLayoutX(362);
			startButton.setLayoutY(600);
			startButton.setMinWidth(300);
			startButton.setMinHeight(50);
			startButton.setFont(Font.font("Verdana", 20));
			startButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	            	//Arraylist of player names taken from the user
	            	ArrayList<String>playerNames=new ArrayList<String>();
	            	if ((player1Name.getText() != null && !player1Name.getText().isEmpty())) {
	            		//player1Name.getText() = player1Name.getText() + "      ";
	            		playerNames.add((player1Name.getText()+"        ").substring(0,8));
	                } else {
	                	playerNames.add("Player 1");
	                }
	            	if ((player2Name.getText() != null && !player2Name.getText().isEmpty())) {
	            		playerNames.add((player2Name.getText()+"        ").substring(0,8));
	                } else {
	                	playerNames.add("Player 2");
	                }
	            	if ((player3Name.getText() != null && !player3Name.getText().isEmpty())) {
	            		playerNames.add((player3Name.getText()+"        ").substring(0,8));
	                } else {
	                	playerNames.add("Player 3");
	                }
	            	if ((player4Name.getText() != null && !player4Name.getText().isEmpty())) {
	            		playerNames.add((player4Name.getText()+"        ").substring(0,8));
	                } else {
	                	playerNames.add("Player 4");
	                }
	            	masterViewsController.goToGameScene(masterViewsController, gameLevel, gameMode, humanPlayerCount, false, playerNames);
	            	
	            }
	        });        
			root.getChildren().add(startButton);
			multiplayerSetupScene.setOnKeyPressed(new EventHandler<KeyEvent>() {
			    @Override
			    public void handle(KeyEvent ke) {
			        if (ke.getCode() == KeyCode.ENTER) {
			        	ArrayList<String>playerNames=new ArrayList<String>();
		            	if ((player1Name.getText() != null && !player1Name.getText().isEmpty())) {
		            		playerNames.add((player1Name.getText()+"        ").substring(0,8));
		                } else {
		                	playerNames.add("Player 1");
		                }
		            	if ((player2Name.getText() != null && !player2Name.getText().isEmpty())) {
		            		playerNames.add((player2Name.getText()+"        ").substring(0,8));
		                } else {
		                	playerNames.add("Player 2");
		                }
		            	if ((player3Name.getText() != null && !player3Name.getText().isEmpty())) {
		            		playerNames.add((player3Name.getText()+"        ").substring(0,8));
		                } else {
		                	playerNames.add("Player 3");
		                }
		            	if ((player4Name.getText() != null && !player4Name.getText().isEmpty())) {
		            		playerNames.add((player4Name.getText()+"        ").substring(0,8));
		                } else {
		                	playerNames.add("Player 4");
		                }
		            	masterViewsController.goToGameScene(masterViewsController, gameLevel, gameMode, humanPlayerCount, false, playerNames);
			    				        	
			        } 
			    }
			});
			
			
			break;
		default:
			break;
		}	
		
		
		
		return multiplayerSetupScene;
	}
}
